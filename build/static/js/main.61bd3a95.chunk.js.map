{"version":3,"sources":["types.ts","state/reducer.ts","state/state.tsx","AddPatientModal/FormField.tsx","AddPatientModal/AddPatientForm.tsx","AddPatientModal/index.tsx","components/HealthRatingBar.tsx","PatientListPage/index.tsx","constants.ts","AddEntryModal/FormField.tsx","AddEntryModal/HealthCheckForm.tsx","AddEntryModal/HospitalForm.tsx","AddEntryModal/OccupationalHealthcareForm.tsx","AddEntryModal/AddEntryForm.tsx","AddEntryModal/index.tsx","PatientDetail/index.tsx","App.tsx","index.tsx"],"names":["Gender","HealthCheckRating","EntryType","updatePatient","patient","type","payload","addEntry","id","entry","initialState","patients","diagnosis","StateContext","createContext","StateProvider","reducer","children","useReducer","state","dispatch","Provider","value","useStateValue","useContext","SelectField","name","label","options","Form","Field","as","className","map","option","key","TextField","field","placeholder","style","color","genderOptions","Male","Female","Other","AddPatientForm","onSubmit","onCancel","initialValues","ssn","dateOfBirth","occupation","gender","validate","values","errors","isValid","dirty","component","Grid","Column","floated","width","Button","onClick","disabled","AddPatientModal","modalOpen","onClose","error","Modal","open","centered","closeIcon","Header","Content","Segment","inverted","HEALTHBAR_TEXTS","HealthRatingBar","rating","showText","Rating","icon","maxRating","PatientListPage","React","useState","setModalOpen","setError","closeModal","undefined","submitNewPatient","a","axios","post","newPatient","data","console","response","Container","textAlign","Table","celled","Row","HeaderCell","Body","Object","Cell","to","NumberField","min","max","DiagnosisSelection","setFieldValue","setFieldTouched","stateOptions","code","text","Dropdown","fluid","multiple","search","selection","onChange","_event","HealthCheckForm","description","specialist","date","healthCheckRating","diagnosisCodes","Date","parse","HospitalForm","discharge","criteria","requiredError","log","OccupationalHealthcareForm","employerName","sickLeave","startDate","endDate","entryTypeOptions","HealthCheck","Hospital","OccupationalHealthcare","AddEntryForm","entryType","setEntryType","target","AddEntryModal","Icon","size","heartColor","i","EntryDetail","Error","JSON","stringify","assertNever","PatientDetail","useParams","newEntry","entries","get","getPatientDetail","genderIcon","length","App","useEffect","patientListFromApi","fetchPatientList","diagnosisListFromApi","fetchDiagnosisList","Link","primary","Divider","hidden","path","render","ReactDOM","action","reduce","memo","document","getElementById"],"mappings":"yJAMYA,EAqBAC,EAOAC,E,yKCACC,EAAgB,SAACC,GAC5B,MAAO,CAAEC,KAAM,iBAAkBC,QAASF,IAO/BG,EAAW,SAACC,EAAYC,GACnC,MAAO,CAAEJ,KAAM,YAAaG,GAAIA,EAAIF,QAASG,ICjCzCC,EAAsB,CAC1BC,SAAU,GACVC,UAAW,IAGAC,EAAeC,wBAA+C,CACzEJ,EACA,kBAAMA,KAQKK,EAA8C,SAAC,GAGjC,IAFzBC,EAEwB,EAFxBA,QACAC,EACwB,EADxBA,SACwB,EACEC,qBAAWF,EAASN,GADtB,mBACjBS,EADiB,KACVC,EADU,KAExB,OACE,kBAACP,EAAaQ,SAAd,CAAuBC,MAAO,CAACH,EAAOC,IACnCH,IAIMM,EAAgB,kBAAMC,qBAAWX,I,6DClBjCY,EAA0C,SAAC,GAAD,IACrDC,EADqD,EACrDA,KACAC,EAFqD,EAErDA,MACAC,EAHqD,EAGrDA,QAHqD,OAKrD,kBAACC,EAAA,EAAKC,MAAN,KACE,+BAAQH,GACR,kBAAC,IAAD,CAAOI,GAAG,SAASL,KAAMA,EAAMM,UAAU,eACtCJ,EAAQK,KAAI,SAACC,GAAD,OACX,4BAAQC,IAAKD,EAAOZ,MAAOA,MAAOY,EAAOZ,OACtCY,EAAOP,OAASO,EAAOZ,aAYrBc,EAAiC,SAAC,GAAD,IAC5CC,EAD4C,EAC5CA,MACAV,EAF4C,EAE5CA,MACAW,EAH4C,EAG5CA,YAH4C,OAK5C,kBAACT,EAAA,EAAKC,MAAN,KACE,+BAAQH,GACR,kBAAC,IAAD,eAAOW,YAAaA,GAAiBD,IACrC,yBAAKE,MAAO,CAAEC,MAAO,QACnB,kBAAC,IAAD,CAAcd,KAAMW,EAAMX,W,SH3CpB1B,K,YAAAA,E,gBAAAA,E,eAAAA,M,cAqBAC,O,qBAAAA,I,qBAAAA,I,uBAAAA,I,gCAAAA,M,cAOAC,K,0BAAAA,E,oBAAAA,E,iDAAAA,M,KIhBZ,IAAMuC,EAAgC,CACpC,CAAEnB,MAAOtB,EAAO0C,KAAMf,MAAO,QAC7B,CAAEL,MAAOtB,EAAO2C,OAAQhB,MAAO,UAC/B,CAAEL,MAAOtB,EAAO4C,MAAOjB,MAAO,UAwFjBkB,EArFgC,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAC1D,OACE,kBAAC,IAAD,CACEC,cAAe,CACbtB,KAAM,GACNuB,IAAK,GACLC,YAAa,GACbC,WAAY,GACZC,OAAQpD,EAAO4C,OAEjBE,SAAUA,EACVO,SAAU,SAAAC,GACR,IACMC,EAAsC,GAa5C,OAZKD,EAAO5B,OACV6B,EAAO7B,KAHa,qBAKjB4B,EAAOL,MACVM,EAAON,IANa,qBAQjBK,EAAOJ,cACVK,EAAOL,YATa,qBAWjBI,EAAOH,aACVI,EAAOJ,WAZa,qBAcfI,KAGR,YAAyB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACX,OACE,kBAAC,IAAD,CAAMzB,UAAU,WACd,kBAAC,IAAD,CACEL,MAAM,OACNW,YAAY,OACZZ,KAAK,OACLgC,UAAWtB,IAEb,kBAAC,IAAD,CACET,MAAM,yBACNW,YAAY,MACZZ,KAAK,MACLgC,UAAWtB,IAEb,kBAAC,IAAD,CACET,MAAM,gBACNW,YAAY,aACZZ,KAAK,cACLgC,UAAWtB,IAEb,kBAAC,IAAD,CACET,MAAM,aACNW,YAAY,aACZZ,KAAK,aACLgC,UAAWtB,IAEb,kBAAC,EAAD,CACET,MAAM,SACND,KAAK,SACLE,QAASa,IAEX,kBAACkB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,CAAaC,QAAQ,OAAOC,MAAO,GACjC,kBAACC,EAAA,EAAD,CAAQ1D,KAAK,SAAS2D,QAASjB,EAAUP,MAAM,OAA/C,WAIF,kBAACmB,EAAA,EAAKC,OAAN,CAAaC,QAAQ,QAAQC,MAAO,GAClC,kBAACC,EAAA,EAAD,CACE1D,KAAK,SACLwD,QAAQ,QACRrB,MAAM,QACNyB,UAAWR,IAAUD,GAJvB,cCvEDU,EAVS,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,QAAStB,EAAvB,EAAuBA,SAAUuB,EAAjC,EAAiCA,MAAjC,OACtB,kBAACC,EAAA,EAAD,CAAOC,KAAMJ,EAAWC,QAASA,EAASI,UAAU,EAAOC,WAAS,GAClE,kBAACH,EAAA,EAAMI,OAAP,0BACA,kBAACJ,EAAA,EAAMK,QAAP,KACGN,GAAS,kBAACO,EAAA,EAAD,CAASC,UAAQ,EAACrC,MAAM,OAAxB,iBAAyC6B,IACnD,kBAAC,EAAD,CAAgBvB,SAAUA,EAAUC,SAAUqB,O,SCR9CU,EAAkB,CACtB,gCACA,6CACA,8CACA,yCAYaC,EATS,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,SACjC,OACE,yBAAKjD,UAAU,cACZ,kBAACkD,EAAA,EAAD,CAAQC,KAAK,QAAQlB,UAAQ,EAACe,OAAQ,EAAIA,EAAQI,UAAW,IAC7DH,EAAW,2BAAIH,EAAgBE,IAAe,OC4DtCK,EAnEmB,WAAO,IAAD,EACL9D,IADK,mBAC7BZ,EAD6B,KAC7BA,SAAYS,EADiB,OAGJkE,IAAMC,UAAkB,GAHpB,mBAG/BpB,EAH+B,KAGpBqB,EAHoB,OAIZF,IAAMC,WAJM,mBAI/BlB,EAJ+B,KAIxBoB,EAJwB,KAQhCC,EAAa,WACjBF,GAAa,GACbC,OAASE,IAGLC,EAAgB,uCAAG,WAAOtC,GAAP,iBAAAuC,EAAA,+EAEcC,IAAMC,KAAN,UC3Bf,OD2Be,aAEjCzC,GAJmB,gBAEP0C,EAFO,EAEbC,KAIR7E,ENAG,CAAEf,KAAM,cAAeC,QMAN0F,IACpBN,IAPqB,gDASrBQ,QAAQ7B,MAAM,KAAE8B,SAASF,MACzBR,EAAS,KAAEU,SAASF,KAAK5B,OAVJ,yDAAH,sDActB,OACE,yBAAKrC,UAAU,OACb,kBAACoE,EAAA,EAAD,CAAWC,UAAU,UACnB,6CAEF,kBAACC,EAAA,EAAD,CAAOC,QAAM,GACX,kBAACD,EAAA,EAAM5B,OAAP,KACE,kBAAC4B,EAAA,EAAME,IAAP,KACE,kBAACF,EAAA,EAAMG,WAAP,aACA,kBAACH,EAAA,EAAMG,WAAP,eACA,kBAACH,EAAA,EAAMG,WAAP,mBACA,kBAACH,EAAA,EAAMG,WAAP,wBAGJ,kBAACH,EAAA,EAAMI,KAAP,KACGC,OAAOrD,OAAO3C,GAAUsB,KAAI,SAAC7B,GAAD,OAC3B,kBAACkG,EAAA,EAAME,IAAP,CAAWrE,IAAK/B,EAAQI,IACtB,kBAAC8F,EAAA,EAAMM,KAAP,KACE,kBAAC,IAAD,CAAMC,GAAE,oBAAezG,EAAQI,KAAOJ,EAAQsB,OAEhD,kBAAC4E,EAAA,EAAMM,KAAP,KAAaxG,EAAQgD,QACrB,kBAACkD,EAAA,EAAMM,KAAP,KAAaxG,EAAQ+C,YACrB,kBAACmD,EAAA,EAAMM,KAAP,KACE,kBAAC,EAAD,CAAiB3B,UAAU,EAAOD,OAAQ,WAMpD,kBAAC,EAAD,CACEb,UAAWA,EACXrB,SAAU8C,EACVvB,MAAOA,EACPD,QAASsB,IAEX,kBAAC3B,EAAA,EAAD,CAAQC,QAAS,kBAxDSwB,GAAa,KAwDvC,qB,QElCOpD,EAAiC,SAAC,GAIxC,IAHLC,EAGI,EAHJA,MACAV,EAEI,EAFJA,MACAW,EACI,EADJA,YAEA,OACE,kBAACT,EAAA,EAAKC,MAAN,KACE,+BAAQH,GACR,kBAAC,IAAD,eAAOW,YAAaA,GAAiBD,IACrC,yBAAKE,MAAO,CAAEC,MAAO,QACnB,kBAAC,IAAD,CAAcd,KAAMW,EAAMX,UAgBrBoF,EAAqC,SAAC,GAAD,IAChDzE,EADgD,EAChDA,MACAV,EAFgD,EAEhDA,MACAoF,EAHgD,EAGhDA,IACAC,EAJgD,EAIhDA,IAJgD,OAMhD,kBAACnF,EAAA,EAAKC,MAAN,KACE,+BAAQH,GACR,kBAAC,IAAD,iBAAWU,EAAX,CAAkBhC,KAAK,SAAS0G,IAAKA,EAAKC,IAAKA,KAE/C,yBAAKzE,MAAO,CAAEC,MAAO,QACnB,kBAAC,IAAD,CAAcd,KAAMW,EAAMX,UAKnBuF,EAAqB,SAAC,GAM5B,IALLC,EAKI,EALJA,cACAC,EAII,EAJJA,gBAII,EACoB5F,IAAfX,EADL,oBACKA,UAEHyB,EAAQ,iBASR+E,EAAeT,OAAOrD,OAAO1C,GAAWqB,KAAI,SAACrB,GAAD,MAAgB,CAChEuB,IAAKvB,EAAUyG,KACfC,KAAK,GAAD,OAAK1G,EAAUc,KAAf,aAAwBd,EAAUyG,KAAlC,KACJ/F,MAAOV,EAAUyG,SAGnB,OACE,kBAACxF,EAAA,EAAKC,MAAN,KACE,4CACA,kBAACyF,EAAA,EAAD,CACEC,OAAK,EACLC,UAAQ,EACRC,QAAM,EACNC,WAAS,EACT/F,QAASwF,EACTQ,SAvBW,SACfC,EACA5B,GAEAkB,EAAgB9E,GAAO,GACvB6E,EAAc7E,EAAO4D,EAAK3E,UAoBxB,kBAAC,IAAD,CAAcI,KAAMW,MCPXyF,EAhG0B,SAAC,GAA4B,IAA1BhF,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACpD,OACE,kBAAC,IAAD,CACEC,cAAe,CACb+E,YAAa,GACbC,WAAY,GACZC,KAAM,GACN5H,KAAM,cACN6H,kBAAmB,EACnBC,oBAAgBxC,GAElB7C,SAAUA,EACVO,SAAU,SAACC,GACT,IACMC,EAAsC,GAmB5C,OAlBKD,EAAOyE,cACVxE,EAAOwE,YAHa,qBAKjBzE,EAAO2E,OACV1E,EAAO0E,KANa,qBAQlB3E,EAAO2E,OAASG,KAAKC,MAAM/E,EAAO2E,QACpC1E,EAAO0E,KAAO,yBAEX3E,EAAO0E,aACVzE,EAAOyE,WAZa,qBAcjB1E,EAAO4E,oBACV3E,EAAO2E,kBAfa,sBAiBlB5E,EAAO4E,kBAAoB,GAAK5E,EAAO4E,kBAAoB,KAC7D3E,EAAO2E,kBAAoB,mCAEtB3E,KAGR,YAAyD,IAAtDC,EAAqD,EAArDA,QAASC,EAA4C,EAA5CA,MAAO0D,EAAqC,EAArCA,gBAAiBD,EAAoB,EAApBA,cACnC,OACE,kBAAC,IAAD,CAAMlF,UAAU,WACd,kBAAC,IAAD,CACEL,MAAM,cACNW,YAAY,cACZZ,KAAK,cACLgC,UAAWtB,IAEb,kBAAC,IAAD,CACET,MAAM,OACNW,YAAY,aACZZ,KAAK,OACLgC,UAAWtB,IAEb,kBAAC,IAAD,CACET,MAAM,aACNW,YAAY,aACZZ,KAAK,aACLgC,UAAWtB,IAEb,kBAAC,IAAD,CACET,MAAM,iBACND,KAAK,gBACLyF,gBAAiBA,EACjBD,cAAeA,EACfxD,UAAWuD,IAEb,kBAAC,IAAD,CACEtF,MAAM,oBACNW,YAAY,MACZZ,KAAK,oBACLgC,UAAWoD,EACXC,IAAK,EACLC,IAAK,IAEP,kBAACrD,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,CAAaC,QAAQ,OAAOC,MAAO,GACjC,kBAACC,EAAA,EAAD,CAAQ1D,KAAK,SAAS2D,QAASjB,EAAUP,MAAM,OAA/C,WAIF,kBAACmB,EAAA,EAAKC,OAAN,CAAaC,QAAQ,QAAQC,MAAO,GAClC,kBAACC,EAAA,EAAD,CACE1D,KAAK,SACLwD,QAAQ,QACRrB,MAAM,QACNyB,UAAWR,IAAUD,GAJvB,cCuCD8E,EAtHuB,SAAC,GAA4B,IAA1BxF,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACjD,OACE,kBAAC,IAAD,CACEC,cAAe,CACb+E,YAAa,GACbC,WAAY,GACZC,KAAM,GACN5H,KAAM,WACNkI,UAAW,CACTN,KAAM,GACNO,SAAU,IAEZL,oBAAgBxC,GAElB7C,SAAUA,EACVO,SAAU,SAACC,GACT,IAAMmF,EAAgB,oBAChBlF,EAEF,GAgCJ,OA/BKD,EAAOyE,cACVxE,EAAOwE,YAAcU,GAElBnF,EAAO2E,OACV1E,EAAO0E,KAAOQ,GAEZnF,EAAO2E,OAASG,KAAKC,MAAM/E,EAAO2E,QACpC1E,EAAO0E,KAAO,yBAEX3E,EAAO0E,aACVzE,EAAOyE,WAAaS,GAEjBnF,EAAOiF,UAAUC,WACpBjF,EAAOgF,UACuB,kBAArBhF,EAAOgF,UAAd,2BACShF,EAAOgF,WADhB,IAC2BC,SAAUC,IACjC,CAAED,SAAUC,IAEfnF,EAAOiF,UAAUN,OACpB1E,EAAOgF,UACuB,kBAArBhF,EAAOgF,UAAd,2BACShF,EAAOgF,WADhB,IAC2BN,KAAMQ,IAC7B,CAAER,KAAMQ,IAEZnF,EAAOiF,UAAUN,OAASG,KAAKC,MAAM/E,EAAOiF,UAAUN,QACxD1E,EAAOgF,UACuB,kBAArBhF,EAAOgF,UAAd,2BACShF,EAAOgF,WADhB,IAC2BN,KAAM,0BAC7B,CAAEA,KAAM,0BAEhB/B,QAAQwC,IAAInF,GACLA,KAGR,YAAyD,IAAtDC,EAAqD,EAArDA,QAASC,EAA4C,EAA5CA,MAAO0D,EAAqC,EAArCA,gBAAiBD,EAAoB,EAApBA,cACnC,OACE,kBAAC,IAAD,CAAMlF,UAAU,WACd,kBAAC,IAAD,CACEL,MAAM,cACNW,YAAY,cACZZ,KAAK,cACLgC,UAAWtB,IAEb,kBAAC,IAAD,CACET,MAAM,OACNW,YAAY,aACZZ,KAAK,OACLgC,UAAWtB,IAEb,kBAAC,IAAD,CACET,MAAM,aACNW,YAAY,aACZZ,KAAK,aACLgC,UAAWtB,IAEb,kBAAC,IAAD,CACET,MAAM,iBACND,KAAK,gBACLyF,gBAAiBA,EACjBD,cAAeA,EACfxD,UAAWuD,IAEb,kBAAC,IAAD,CACEtF,MAAM,iBACNW,YAAY,aACZZ,KAAK,iBACLgC,UAAWtB,IAEb,kBAAC,IAAD,CACET,MAAM,qBACNW,YAAY,qBACZZ,KAAK,qBACLgC,UAAWtB,IAEb,kBAACuB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,CAAaC,QAAQ,OAAOC,MAAO,GACjC,kBAACC,EAAA,EAAD,CAAQ1D,KAAK,SAAS2D,QAASjB,EAAUP,MAAM,OAA/C,WAIF,kBAACmB,EAAA,EAAKC,OAAN,CAAaC,QAAQ,QAAQC,MAAO,GAClC,kBAACC,EAAA,EAAD,CACE1D,KAAK,SACLwD,QAAQ,QACRrB,MAAM,QACNyB,UAAWR,IAAUD,GAJvB,cCuBDmF,EA5HqC,SAAC,GAG9C,IAFL7F,EAEI,EAFJA,SACAC,EACI,EADJA,SAEA,OACE,kBAAC,IAAD,CACEC,cAAe,CACb+E,YAAa,GACbC,WAAY,GACZC,KAAM,GACN5H,KAAM,yBACNuI,aAAc,GACdC,UAAW,CACTC,UAAW,GACXC,QAAS,IAEXZ,oBAAgBxC,GAElB7C,SAAUA,EACVO,SAAU,SAACC,GACT,IACMC,EAEF,GA4BJ,OA3BKD,EAAOyE,cACVxE,EAAOwE,YALa,qBAOjBzE,EAAO2E,OACV1E,EAAO0E,KARa,qBAUlB3E,EAAO2E,OAASG,KAAKC,MAAM/E,EAAO2E,QACpC1E,EAAO0E,KAAO,yBAEX3E,EAAO0E,aACVzE,EAAOyE,WAda,qBAgBjB1E,EAAOsF,eACVrF,EAAOqF,aAjBa,qBAmBlBtF,EAAOuF,YAAcT,KAAKC,MAAM/E,EAAOuF,UAAUC,aACnDvF,EAAOsF,UACuB,kBAArBtF,EAAOsF,UAAd,2BACStF,EAAOsF,WADhB,IAC2BC,UAAW,0BAClC,CAAEA,UAAW,0BAEjBxF,EAAOuF,YAAcT,KAAKC,MAAM/E,EAAOuF,UAAUE,WACnDxF,EAAOsF,UACuB,kBAArBtF,EAAOsF,UAAd,2BACStF,EAAOsF,WADhB,IAC2BE,QAAS,0BAChC,CAAEA,QAAS,0BAEZxF,KAGR,YAAyD,IAAtDC,EAAqD,EAArDA,QAASC,EAA4C,EAA5CA,MAAO0D,EAAqC,EAArCA,gBAAiBD,EAAoB,EAApBA,cACnC,OACE,kBAAC,IAAD,CAAMlF,UAAU,WACd,kBAAC,IAAD,CACEL,MAAM,cACNW,YAAY,cACZZ,KAAK,cACLgC,UAAWtB,IAEb,kBAAC,IAAD,CACET,MAAM,OACNW,YAAY,aACZZ,KAAK,OACLgC,UAAWtB,IAEb,kBAAC,IAAD,CACET,MAAM,aACNW,YAAY,aACZZ,KAAK,aACLgC,UAAWtB,IAEb,kBAAC,IAAD,CACET,MAAM,iBACND,KAAK,gBACLyF,gBAAiBA,EACjBD,cAAeA,EACfxD,UAAWuD,IAEb,kBAAC,IAAD,CACEtF,MAAM,gBACNW,YAAY,gBACZZ,KAAK,eACLgC,UAAWtB,IAEb,kBAAC,IAAD,CACET,MAAM,wBACNW,YAAY,aACZZ,KAAK,sBACLgC,UAAWtB,IAEb,kBAAC,IAAD,CACET,MAAM,sBACNW,YAAY,aACZZ,KAAK,oBACLgC,UAAWtB,IAEb,kBAACuB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,CAAaC,QAAQ,OAAOC,MAAO,GACjC,kBAACC,EAAA,EAAD,CAAQ1D,KAAK,SAAS2D,QAASjB,EAAUP,MAAM,OAA/C,WAIF,kBAACmB,EAAA,EAAKC,OAAN,CAAaC,QAAQ,QAAQC,MAAO,GAClC,kBAACC,EAAA,EAAD,CACE1D,KAAK,SACLwD,QAAQ,QACRrB,MAAM,QACNyB,UAAWR,IAAUD,GAJvB,cC1GVwF,GAAsC,CAC1C,CAAE1H,MAAOpB,EAAU+I,YAAatH,MAAO,eACvC,CAAEL,MAAOpB,EAAUgJ,SAAUvH,MAAO,YACpC,CAAEL,MAAOpB,EAAUiJ,uBAAwBxH,MAAO,2BAiCrCyH,GA9B8B,SAAC,GAA4B,IAA1BtG,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SAAe,EACrCuC,IAAMC,SAAS,eADsB,mBAChE8D,EADgE,KACrDC,EADqD,KAGvE,OACE,6BACE,0CACA,4BACEhI,MAAO+H,EACPzB,SAAU,gBAAG2B,EAAH,EAAGA,OAAH,OAAgBD,EAAaC,EAAOjI,QAC9CU,UAAU,eAETgH,GAAiB/G,KAAI,SAACC,GAAD,OACpB,4BAAQC,IAAKD,EAAOZ,MAAOA,MAAOY,EAAOZ,OACtCY,EAAOP,OAASO,EAAOZ,WAIf,gBAAd+H,GACC,kBAAC,EAAD,CAAiBvG,SAAUA,EAAUC,SAAUA,IAElC,aAAdsG,GACC,kBAAC,EAAD,CAAcvG,SAAUA,EAAUC,SAAUA,IAE/B,2BAAdsG,GACC,kBAAC,EAAD,CAA4BvG,SAAUA,EAAUC,SAAUA,MCxBnDyG,GAVO,SAAC,GAAD,IAAGrF,EAAH,EAAGA,UAAWC,EAAd,EAAcA,QAAStB,EAAvB,EAAuBA,SAAUuB,EAAjC,EAAiCA,MAAjC,OACpB,kBAACC,EAAA,EAAD,CAAOC,KAAMJ,EAAWC,QAASA,EAASI,UAAU,EAAOC,WAAS,GAClE,kBAACH,EAAA,EAAMI,OAAP,wBACA,kBAACJ,EAAA,EAAMK,QAAP,KACGN,GAAS,kBAACO,EAAA,EAAD,CAASC,UAAQ,EAACrC,MAAM,OAAxB,iBAAyC6B,IACnD,kBAAC,GAAD,CAAcvB,SAAUA,EAAUC,SAAUqB,OCE5C6E,GAAqD,SAAC,GAAe,IAAbxI,EAAY,EAAZA,MAAY,EAChDc,IAAfX,EAD+D,oBAC/DA,UAgBT,OACE,kBAAC0F,EAAA,EAAD,CAAOC,QAAM,GACX,kBAACD,EAAA,EAAMI,KAAP,KACE,kBAACJ,EAAA,EAAME,IAAP,KACE,kBAACF,EAAA,EAAMM,KAAP,KACE,4BACGnG,EAAMwH,KADT,IACe,kBAACwB,EAAA,EAAD,CAAM/H,KAAM,UAAWgI,KAAK,WAE3C,0CAAgBjJ,EAAMuH,YACtB,uBAAGzF,MAAO,CAAEC,MAAO,SAAW/B,EAAMsH,aALtC,IAKuD,6BACrD,kBAAC0B,EAAA,EAAD,CAAM/H,KAAK,QAAQc,MAzBV,WACjB,OAAQ/B,EAAMyH,mBACZ,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,SACT,KAAK,EACH,MAAO,MACT,QACE,QAc8ByB,KAC1B,4BACGlJ,EAAM0H,gBACL1H,EAAM0H,eAAelG,KAAI,SAACoF,EAAMuC,GAAP,aACvB,wBAAIzH,IAAKyH,GACNvC,EADH,eACWzG,EAAUyG,UADrB,aACW,EAAiB3F,eAWxCwH,GAA+C,SAAC,GAAe,IAAbzI,EAAY,EAAZA,MAAY,EAC1Cc,IAAfX,EADyD,oBACzDA,UAET,OACE,kBAAC0F,EAAA,EAAD,CAAOC,QAAM,GACX,kBAACD,EAAA,EAAMI,KAAP,KACE,kBAACJ,EAAA,EAAME,IAAP,KACE,kBAACF,EAAA,EAAMM,KAAP,KACE,4BACGnG,EAAMwH,KADT,IACe,kBAACwB,EAAA,EAAD,CAAM/H,KAAM,WAAYgI,KAAK,WAE5C,0CAAgBjJ,EAAMuH,YACtB,uBAAGzF,MAAO,CAAEC,MAAO,SAAW/B,EAAMsH,aACpC,2BACGtH,EAAM8H,UAAUN,KADnB,KAC2BxH,EAAM8H,UAAUC,UAE3C,4BACG/H,EAAM0H,gBACL1H,EAAM0H,eAAelG,KAAI,SAACoF,EAAMuC,GAAP,aACvB,wBAAIzH,IAAKyH,GACNvC,EADH,eACWzG,EAAUyG,UADrB,aACW,EAAiB3F,eAWxCyH,GAED,SAAC,GAAe,IAAb1I,EAAY,EAAZA,MAAY,EACMc,IAAfX,EADS,oBACTA,UAET,OACE,kBAAC0F,EAAA,EAAD,CAAOC,QAAM,GACX,kBAACD,EAAA,EAAMI,KAAP,KACE,kBAACJ,EAAA,EAAME,IAAP,KACE,kBAACF,EAAA,EAAMM,KAAP,KACE,4BACGnG,EAAMwH,KADT,IACe,kBAACwB,EAAA,EAAD,CAAM/H,KAAM,cAAegI,KAAK,UAAW,IACvDjJ,EAAMmI,cAET,0CAAgBnI,EAAMuH,YACtB,uBAAGzF,MAAO,CAAEC,MAAO,SAAW/B,EAAMsH,aACpC,2BACGtH,EAAMoI,WAAa,eADtB,UAC6C,IAC1CpI,EAAMoI,WAAapI,EAAMoI,UAAUC,UAFtC,UAEwD,IACrDrI,EAAMoI,WAAapI,EAAMoI,UAAUE,SAEtC,4BACGtI,EAAM0H,gBACL1H,EAAM0H,eAAelG,KAAI,SAACoF,EAAMuC,GAAP,aACvB,wBAAIzH,IAAKyH,GACNvC,EADH,eACWzG,EAAUyG,UADrB,aACW,EAAiB3F,eAUxCmI,GAA0C,SAAC,GAAe,IAAbpJ,EAAY,EAAZA,MAOjD,OAAQA,EAAMJ,MACZ,IAAK,cACH,OAAO,kBAAC,GAAD,CAAaI,MAAOA,IAC7B,IAAK,WACH,OAAO,kBAAC,GAAD,CAAUA,MAAOA,IAC1B,IAAK,yBACH,OAAO,kBAAC,GAAD,CAAwBA,MAAOA,IACxC,QACE,OAdgB,SAACa,GACnB,MAAM,IAAIwI,MAAJ,gDACqCC,KAAKC,UAAU1I,KAYjD2I,CAAYxJ,KAyFVyJ,GArFiB,WAAO,IAAD,QACH3I,IADG,mBAC3BZ,EAD2B,KAC3BA,SAAYS,EADe,KAE5BZ,EAAO2J,cAAP3J,GAF4B,EAIF8E,IAAMC,UAAkB,GAJtB,mBAI7BpB,EAJ6B,KAIlBqB,EAJkB,OAKVF,IAAMC,WALI,mBAK7BlB,EAL6B,KAKtBoB,EALsB,KAS9BC,EAAa,WACjBF,GAAa,GACbC,OAASE,IAGLC,EAAgB,uCAAG,WAAOtC,GAAP,iBAAAuC,EAAA,+EAEYC,IAAMC,KAAN,UPlKb,OOkKa,qBACLvF,EADK,YAE/B8C,GAJmB,gBAEP8G,EAFO,EAEbnE,KAIR7E,EAASb,EAASC,EAAI4J,IACtB1E,IAPqB,gDASrBQ,QAAQ7B,MAAM,KAAE8B,SAASF,MACzBR,EAAS,KAAEU,SAASF,KAAK5B,OAVJ,yDAAH,uDAcA,uCAAG,kCAAAwB,EAAA,0DACnB,UAAClF,EAASH,UAAV,aAAC,EAAcyC,OAAO,UAACtC,EAASH,UAAV,aAAC,EAAc6J,SADlB,0CAGavE,IAAMwE,IAAN,UPjLd,OOiLc,qBACJ9J,IAJT,gBAGLJ,EAHK,EAGX6F,KAGR7E,EAASjB,EAAcC,IANJ,gDAQnB8F,QAAQ7B,MAAR,MARmB,yDAAH,qDAYtBkG,GAoBA,OACE,yBAAKvI,UAAU,OACb,sCACGrB,EAASH,UADZ,aACG,EAAckB,KACf,kBAAC+H,EAAA,EAAD,CAAM/H,KAtBO,WAAO,IAAD,EACvB,iBAAQf,EAASH,UAAjB,aAAQ,EAAc4C,QACpB,IAAK,OACH,MAAO,OACT,IAAK,SACH,MAAO,QACT,QACE,MAAO,cAeKoH,MAEd,+CAAW7J,EAASH,UAApB,aAAW,EAAcyC,KACzB,sDAAkBtC,EAASH,UAA3B,aAAkB,EAAc2C,YAChC,uCACA,6BAhBY,WAAgB,IAAD,IAC7B,OAAI,UAACxC,EAASH,UAAV,aAAC,EAAc6J,UAA4C,KAAjC,UAAA1J,EAASH,GAAI6J,eAAb,eAAsBI,QAG7C9J,EAASH,GAAI6J,QAFX,GAeJA,GAAUpI,KAAI,SAACxB,GAAD,OACb,kBAAC,GAAD,CAAa0B,IAAK1B,EAAMD,GAAIC,MAAOA,QAGvC,kBAAC,GAAD,CACE0D,UAAWA,EACXrB,SAAU8C,EACVvB,MAAOA,EACPD,QAASsB,IAEX,kBAAC3B,EAAA,EAAD,CAAQC,QAAS,kBAzESwB,GAAa,KAyEvC,mBCrKSkF,GAjDO,WAAO,IAAD,EACLnJ,IAAZH,EADiB,oBA8B1B,OA5BAkE,IAAMqF,WAAU,WACd7E,IAAMwE,IAAN,URfsB,OQetB,UAEsB,uCAAG,8BAAAzE,EAAA,+EAEsBC,IAAMwE,IAAN,URnBzB,OQmByB,cAFtB,gBAEPM,EAFO,EAEb3E,KAGR7E,EfKC,CAAEf,KAAM,mBAAoBC,QeLLsK,IALH,gDAOrB1E,QAAQ7B,MAAR,MAPqB,yDAAH,oDAUtBwG,GAEwB,uCAAG,8BAAAhF,EAAA,+EAEsBC,IAAMwE,IAAN,UR/B3B,OQ+B2B,eAFtB,gBAETQ,EAFS,EAEf7E,KAGR7E,EfKC,CAAEf,KAAM,qBAAsBC,QeLLwK,IALH,gDAOvB5E,QAAQ7B,MAAR,MAPuB,yDAAH,oDAUxB0G,KACC,CAAC3J,IAGF,yBAAKY,UAAU,OACb,kBAAC,IAAD,KACE,kBAACoE,EAAA,EAAD,KACE,kBAAC1B,EAAA,EAAD,CAAQ3C,GAAG,MAAX,aACA,kBAACgC,EAAA,EAAD,CAAQhC,GAAIiJ,IAAMnE,GAAG,IAAIoE,SAAO,GAAhC,QAGA,kBAACC,EAAA,EAAD,CAASC,QAAM,IACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,gBAAgBC,OAAQ,kBAAM,kBAAC,GAAD,SAC1C,kBAAC,IAAD,CAAOD,KAAK,IAAIC,OAAQ,kBAAM,kBAAC,EAAD,cC/C1CC,IAASD,OACP,kBAAC,EAAD,CAAerK,QhBuCM,SAACG,EAAcoK,GACpC,OAAQA,EAAOlL,MACb,IAAK,mBACH,OAAO,2BACFc,GADL,IAEER,SAAS,2BACJ4K,EAAOjL,QAAQkL,QAChB,SAACC,EAAMrL,GAAP,mBAAC,eAAwBqL,GAAzB,kBAAgCrL,EAAQI,GAAKJ,MAC7C,KAECe,EAAMR,YAGf,IAAK,cAQL,IAAK,iBACH,OAAO,2BACFQ,GADL,IAEER,SAAS,2BACJQ,EAAMR,UADH,kBAEL4K,EAAOjL,QAAQE,GAAK+K,EAAOjL,YAGlC,IAAK,qBACH,OAAO,2BACFa,GADL,IAEEP,UAAU,2BACL2K,EAAOjL,QAAQkL,QAChB,SAACC,EAAM7K,GAAP,mBAAC,eAA0B6K,GAA3B,kBAAkC7K,EAAUyG,KAAOzG,MACnD,KAECO,EAAMP,aAGf,IAAK,YACH,IAAMR,EAAO,eAAQe,EAAMR,SAAS4K,EAAO/K,KACrCwF,EAAU,2BACX5F,GADW,IAEdiK,QAAQ,GAAD,mBAAMjK,EAAQiK,SAAd,CAAuBkB,EAAOjL,YAEvC,OAAO,2BACFa,GADL,IAEER,SAAS,2BACJQ,EAAMR,UADH,kBAEL4K,EAAO/K,GAAKwF,MAKnB,QACE,OAAO7E,KgB9FT,kBAAC,GAAD,OAEFuK,SAASC,eAAe,W","file":"static/js/main.61bd3a95.chunk.js","sourcesContent":["export interface Diagnosis {\n  code: string;\n  name: string;\n  latin?: string;\n}\n\nexport enum Gender {\n  Male = 'male',\n  Female = 'female',\n  Other = 'other',\n}\n\nexport interface BaseEntry {\n  id: string;\n  description: string;\n  date: string;\n  specialist: string;\n  diagnosisCodes?: Array<Diagnosis['code']>;\n}\n\nexport interface NewBaseEntry {\n  description: string;\n  date: string;\n  specialist: string;\n  diagnosisCodes?: Array<Diagnosis['code']>;\n}\n\nexport enum HealthCheckRating {\n  'Healthy' = 0,\n  'LowRisk' = 1,\n  'HighRisk' = 2,\n  'CriticalRisk' = 3,\n}\n\nexport enum EntryType {\n  HealthCheck = 'HealthCheck',\n  Hospital = 'Hospital',\n  OccupationalHealthcare = 'OccupationalHealthcare',\n}\n\nexport interface HealthCheckEntry extends BaseEntry {\n  type: 'HealthCheck';\n  healthCheckRating: HealthCheckRating;\n}\nexport interface NewHealthCheckEntry extends NewBaseEntry {\n  type: 'HealthCheck';\n  healthCheckRating: HealthCheckRating;\n}\n\nexport interface Discharge {\n  date: string;\n  criteria: string;\n}\n\nexport interface HospitalEntry extends BaseEntry {\n  type: 'Hospital';\n  discharge: Discharge;\n}\nexport interface NewHospitalEntry extends NewBaseEntry {\n  type: 'Hospital';\n  discharge: Discharge;\n}\n\nexport interface SickLeave {\n  startDate: string;\n  endDate: string;\n}\n\nexport interface OccupationalHealthcareEntry extends BaseEntry {\n  type: 'OccupationalHealthcare';\n  employerName: string;\n  sickLeave?: SickLeave;\n}\n\nexport interface NewOccupationalHealthcareEntry extends NewBaseEntry {\n  type: 'OccupationalHealthcare';\n  employerName: string;\n  sickLeave?: SickLeave;\n}\n\nexport type Entry =\n  | HospitalEntry\n  | OccupationalHealthcareEntry\n  | HealthCheckEntry;\n\nexport type NewEntry =\n  | NewHospitalEntry\n  | NewOccupationalHealthcareEntry\n  | NewHealthCheckEntry;\n\nexport interface Patient {\n  id: string;\n  name: string;\n  occupation: string;\n  gender: Gender;\n  ssn?: string;\n  dateOfBirth: string;\n  entries?: Entry[];\n}\n","import { State } from './state';\nimport { Patient, Diagnosis, Entry } from '../types';\n\nexport type Action =\n  | {\n      type: 'SET_PATIENT_LIST';\n      payload: Patient[];\n    }\n  | {\n      type: 'ADD_PATIENT';\n      payload: Patient;\n    }\n  | {\n      type: 'UPDATE_PATIENT';\n      payload: Patient;\n    }\n  | {\n      type: 'SET_DIAGNOSIS_LIST';\n      payload: Diagnosis[];\n    }\n  | {\n      type: 'ADD_ENTRY';\n      id: string;\n      payload: Entry;\n    };\n\nexport const setPatientList = (patients: Patient[]): Action => {\n  return { type: 'SET_PATIENT_LIST', payload: patients };\n};\n\nexport const addPatient = (patient: Patient): Action => {\n  return { type: 'ADD_PATIENT', payload: patient };\n};\n\nexport const updatePatient = (patient: Patient): Action => {\n  return { type: 'UPDATE_PATIENT', payload: patient };\n};\n\nexport const setDiagnosisList = (diagnosis: Diagnosis[]): Action => {\n  return { type: 'SET_DIAGNOSIS_LIST', payload: diagnosis };\n};\n\nexport const addEntry = (id: string, entry: Entry): Action => {\n  return { type: 'ADD_ENTRY', id: id, payload: entry };\n};\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case 'SET_PATIENT_LIST':\n      return {\n        ...state,\n        patients: {\n          ...action.payload.reduce(\n            (memo, patient) => ({ ...memo, [patient.id]: patient }),\n            {}\n          ),\n          ...state.patients,\n        },\n      };\n    case 'ADD_PATIENT':\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload,\n        },\n      };\n    case 'UPDATE_PATIENT':\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.payload.id]: action.payload,\n        },\n      };\n    case 'SET_DIAGNOSIS_LIST':\n      return {\n        ...state,\n        diagnosis: {\n          ...action.payload.reduce(\n            (memo, diagnosis) => ({ ...memo, [diagnosis.code]: diagnosis }),\n            {}\n          ),\n          ...state.diagnosis,\n        },\n      };\n    case 'ADD_ENTRY': {\n      const patient = { ...state.patients[action.id] };\n      const newPatient = {\n        ...patient,\n        entries: [...patient.entries, action.payload],\n      };\n      return {\n        ...state,\n        patients: {\n          ...state.patients,\n          [action.id]: newPatient,\n        },\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","import React, { createContext, useContext, useReducer } from 'react';\nimport { Patient, Diagnosis } from '../types';\n\nimport { Action } from './reducer';\n\nexport type State = {\n  patients: { [id: string]: Patient };\n  diagnosis: { [code: string]: Diagnosis };\n};\n\nconst initialState: State = {\n  patients: {},\n  diagnosis: {},\n};\n\nexport const StateContext = createContext<[State, React.Dispatch<Action>]>([\n  initialState,\n  () => initialState,\n]);\n\ntype StateProviderProps = {\n  reducer: React.Reducer<State, Action>;\n  children: React.ReactElement;\n};\n\nexport const StateProvider: React.FC<StateProviderProps> = ({\n  reducer,\n  children,\n}: StateProviderProps) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  return (\n    <StateContext.Provider value={[state, dispatch]}>\n      {children}\n    </StateContext.Provider>\n  );\n};\nexport const useStateValue = () => useContext(StateContext);\n","import React from 'react';\nimport { ErrorMessage, Field, FieldProps, FormikProps } from 'formik';\nimport { Dropdown, DropdownProps, Form } from 'semantic-ui-react';\nimport { Diagnosis, Gender } from '../types';\n\n// structure of a single option\nexport type GenderOption = {\n  value: Gender;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: GenderOption[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options,\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as='select' name={name} className='ui dropdown'>\n      {options.map((option) => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder,\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field placeholder={placeholder} {...field} />\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({\n  field,\n  label,\n  min,\n  max,\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  diagnoses,\n  setFieldValue,\n  setFieldTouched,\n}: {\n  diagnoses: Diagnosis[];\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>['setFieldValue'];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>['setFieldTouched'];\n}) => {\n  const field = 'diagnosisCodes';\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = diagnoses.map((diagnosis) => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code,\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","import React from \"react\";\nimport { Grid, Button } from \"semantic-ui-react\";\nimport { Field, Formik, Form } from \"formik\";\n\nimport { TextField, SelectField, GenderOption } from \"./FormField\";\nimport { Gender, Patient } from \"../types\";\n\n/*\n * use type Patient, but omit id and entries,\n * because those are irrelevant for new patient object.\n */\nexport type PatientFormValues = Omit<Patient, \"id\" | \"entries\">;\n\ninterface Props {\n  onSubmit: (values: PatientFormValues) => void;\n  onCancel: () => void;\n}\n\nconst genderOptions: GenderOption[] = [\n  { value: Gender.Male, label: \"Male\" },\n  { value: Gender.Female, label: \"Female\" },\n  { value: Gender.Other, label: \"Other\" }\n];\n\nexport const AddPatientForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  return (\n    <Formik\n      initialValues={{\n        name: \"\",\n        ssn: \"\",\n        dateOfBirth: \"\",\n        occupation: \"\",\n        gender: Gender.Other\n      }}\n      onSubmit={onSubmit}\n      validate={values => {\n        const requiredError = \"Field is required\";\n        const errors: { [field: string]: string } = {};\n        if (!values.name) {\n          errors.name = requiredError;\n        }\n        if (!values.ssn) {\n          errors.ssn = requiredError;\n        }\n        if (!values.dateOfBirth) {\n          errors.dateOfBirth = requiredError;\n        }\n        if (!values.occupation) {\n          errors.occupation = requiredError;\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty }) => {\n        return (\n          <Form className=\"form ui\">\n            <Field\n              label=\"Name\"\n              placeholder=\"Name\"\n              name=\"name\"\n              component={TextField}\n            />\n            <Field\n              label=\"Social Security Number\"\n              placeholder=\"SSN\"\n              name=\"ssn\"\n              component={TextField}\n            />\n            <Field\n              label=\"Date Of Birth\"\n              placeholder=\"YYYY-MM-DD\"\n              name=\"dateOfBirth\"\n              component={TextField}\n            />\n            <Field\n              label=\"Occupation\"\n              placeholder=\"Occupation\"\n              name=\"occupation\"\n              component={TextField}\n            />\n            <SelectField\n              label=\"Gender\"\n              name=\"gender\"\n              options={genderOptions}\n            />\n            <Grid>\n              <Grid.Column floated=\"left\" width={5}>\n                <Button type=\"button\" onClick={onCancel} color=\"red\">\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated=\"right\" width={5}>\n                <Button\n                  type=\"submit\"\n                  floated=\"right\"\n                  color=\"green\"\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default AddPatientForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddPatientForm, { PatientFormValues } from './AddPatientForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: PatientFormValues) => void;\n  error?: string;\n}\n\nconst AddPatientModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new patient</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color=\"red\">{`Error: ${error}`}</Segment>}\n      <AddPatientForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddPatientModal;\n","import React from 'react';\nimport { Rating } from 'semantic-ui-react';\n\ntype BarProps = {\n  rating: number;\n  showText: boolean;\n};\n\nconst HEALTHBAR_TEXTS = [\n  'The patient is in great shape',\n  'The patient has a low risk of getting sick',\n  'The patient has a high risk of getting sick',\n  'The patient has a diagnosed condition',\n];\n\nconst HealthRatingBar = ({ rating, showText }: BarProps) => {\n  return (\n    <div className=\"health-bar\">\n      {<Rating icon=\"heart\" disabled rating={4 - rating} maxRating={4} />}\n      {showText ? <p>{HEALTHBAR_TEXTS[rating]}</p> : null}\n    </div>\n  );\n};\n\nexport default HealthRatingBar;\n","import React from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { Container, Table, Button } from 'semantic-ui-react';\n\nimport { PatientFormValues } from '../AddPatientModal/AddPatientForm';\nimport AddPatientModal from '../AddPatientModal';\nimport { Patient } from '../types';\nimport { apiBaseUrl } from '../constants';\nimport HealthRatingBar from '../components/HealthRatingBar';\nimport { useStateValue, addPatient } from '../state';\n\nconst PatientListPage: React.FC = () => {\n  const [{ patients }, dispatch] = useStateValue();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatient = async (values: PatientFormValues) => {\n    try {\n      const { data: newPatient } = await axios.post<Patient>(\n        `${apiBaseUrl}/patients`,\n        values\n      );\n      dispatch(addPatient(newPatient));\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  return (\n    <div className='App'>\n      <Container textAlign='center'>\n        <h3>Patient list</h3>\n      </Container>\n      <Table celled>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Name</Table.HeaderCell>\n            <Table.HeaderCell>Gender</Table.HeaderCell>\n            <Table.HeaderCell>Occupation</Table.HeaderCell>\n            <Table.HeaderCell>Health Rating</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {Object.values(patients).map((patient: Patient) => (\n            <Table.Row key={patient.id}>\n              <Table.Cell>\n                <Link to={`/patients/${patient.id}`}>{patient.name}</Link>\n              </Table.Cell>\n              <Table.Cell>{patient.gender}</Table.Cell>\n              <Table.Cell>{patient.occupation}</Table.Cell>\n              <Table.Cell>\n                <HealthRatingBar showText={false} rating={1} />\n              </Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n      <AddPatientModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewPatient}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Patient</Button>\n    </div>\n  );\n};\n\nexport default PatientListPage;\n","export const apiBaseUrl = '/api';\n","import React from 'react';\nimport { ErrorMessage, Field, FieldProps, FormikProps } from 'formik';\nimport { Dropdown, DropdownProps, Form } from 'semantic-ui-react';\nimport { EntryType } from '../types';\nimport { useStateValue } from '../state';\n\nexport type EntryTypeOption = {\n  value: EntryType;\n  label: string;\n};\n\n// props for select field component\ntype SelectFieldProps = {\n  name: string;\n  label: string;\n  options: EntryTypeOption[];\n};\n\nexport const SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  label,\n  options,\n}: SelectFieldProps) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field as='select' name={name} className='ui dropdown'>\n      {options.map((option) => (\n        <option key={option.value} value={option.value}>\n          {option.label || option.value}\n        </option>\n      ))}\n    </Field>\n  </Form.Field>\n);\n\ninterface TextProps extends FieldProps {\n  label: string;\n  placeholder: string;\n}\n\nexport const TextField: React.FC<TextProps> = ({\n  field,\n  label,\n  placeholder,\n}) => {\n  return (\n    <Form.Field>\n      <label>{label}</label>\n      <Field placeholder={placeholder} {...field} />\n      <div style={{ color: 'red' }}>\n        <ErrorMessage name={field.name} />\n      </div>\n    </Form.Field>\n  );\n};\n\n/*\n  for exercises 9.24.-\n*/\ninterface NumberProps extends FieldProps {\n  label: string;\n  errorMessage?: string;\n  min: number;\n  max: number;\n}\n\nexport const NumberField: React.FC<NumberProps> = ({\n  field,\n  label,\n  min,\n  max,\n}) => (\n  <Form.Field>\n    <label>{label}</label>\n    <Field {...field} type='number' min={min} max={max} />\n\n    <div style={{ color: 'red' }}>\n      <ErrorMessage name={field.name} />\n    </div>\n  </Form.Field>\n);\n\nexport const DiagnosisSelection = ({\n  setFieldValue,\n  setFieldTouched,\n}: {\n  setFieldValue: FormikProps<{ diagnosisCodes: string[] }>['setFieldValue'];\n  setFieldTouched: FormikProps<{ diagnosisCodes: string[] }>['setFieldTouched'];\n}) => {\n  const [{ diagnosis }] = useStateValue();\n\n  const field = 'diagnosisCodes';\n  const onChange = (\n    _event: React.SyntheticEvent<HTMLElement, Event>,\n    data: DropdownProps\n  ) => {\n    setFieldTouched(field, true);\n    setFieldValue(field, data.value);\n  };\n\n  const stateOptions = Object.values(diagnosis).map((diagnosis) => ({\n    key: diagnosis.code,\n    text: `${diagnosis.name} (${diagnosis.code})`,\n    value: diagnosis.code,\n  }));\n\n  return (\n    <Form.Field>\n      <label>Diagnoses</label>\n      <Dropdown\n        fluid\n        multiple\n        search\n        selection\n        options={stateOptions}\n        onChange={onChange}\n      />\n      <ErrorMessage name={field} />\n    </Form.Field>\n  );\n};\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport { TextField, NumberField, DiagnosisSelection } from './FormField';\nimport { NewHealthCheckEntry } from '../types';\n\nexport type EntryFormValues = NewHealthCheckEntry;\n\ninterface Props {\n  onSubmit: (values: EntryFormValues) => void;\n  onCancel: () => void;\n}\n\nconst HealthCheckForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  return (\n    <Formik\n      initialValues={{\n        description: '',\n        specialist: '',\n        date: '',\n        type: 'HealthCheck',\n        healthCheckRating: 0,\n        diagnosisCodes: undefined,\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: { [field: string]: string } = {};\n        if (!values.description) {\n          errors.description = requiredError;\n        }\n        if (!values.date) {\n          errors.date = requiredError;\n        }\n        if (values.date && !Date.parse(values.date)) {\n          errors.date = 'Incorrect format date';\n        }\n        if (!values.specialist) {\n          errors.specialist = requiredError;\n        }\n        if (!values.healthCheckRating) {\n          errors.healthCheckRating = requiredError;\n        }\n        if (values.healthCheckRating > 3 || values.healthCheckRating < 0) {\n          errors.healthCheckRating = 'Health Check Rating must be 0-3';\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty, setFieldTouched, setFieldValue }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Description'\n              placeholder='description'\n              name='description'\n              component={TextField}\n            />\n            <Field\n              label='Date'\n              placeholder='YYYY-MM-DD'\n              name='date'\n              component={TextField}\n            />\n            <Field\n              label='Specialist'\n              placeholder='specialist'\n              name='specialist'\n              component={TextField}\n            />\n            <Field\n              label='Diagnosis Code'\n              name='diagnosisCode'\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              component={DiagnosisSelection}\n            />\n            <Field\n              label='HealthCheckRating'\n              placeholder='0-3'\n              name='healthCheckRating'\n              component={NumberField}\n              min={0}\n              max={3}\n            />\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default HealthCheckForm;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport { TextField, DiagnosisSelection } from './FormField';\nimport { NewHospitalEntry } from '../types';\n\nexport type EntryFormValues = NewHospitalEntry;\n\ninterface Props {\n  onSubmit: (values: EntryFormValues) => void;\n  onCancel: () => void;\n}\n\nconst HospitalForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  return (\n    <Formik\n      initialValues={{\n        description: '',\n        specialist: '',\n        date: '',\n        type: 'Hospital',\n        discharge: {\n          date: '',\n          criteria: '',\n        },\n        diagnosisCodes: undefined,\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: {\n          [field: string]: string | { [field: string]: string };\n        } = {};\n        if (!values.description) {\n          errors.description = requiredError;\n        }\n        if (!values.date) {\n          errors.date = requiredError;\n        }\n        if (values.date && !Date.parse(values.date)) {\n          errors.date = 'Incorrect format date';\n        }\n        if (!values.specialist) {\n          errors.specialist = requiredError;\n        }\n        if (!values.discharge.criteria) {\n          errors.discharge =\n            typeof errors.discharge === 'object'\n              ? { ...errors.discharge, criteria: requiredError }\n              : { criteria: requiredError };\n        }\n        if (!values.discharge.date) {\n          errors.discharge =\n            typeof errors.discharge === 'object'\n              ? { ...errors.discharge, date: requiredError }\n              : { date: requiredError };\n        }\n        if (values.discharge.date && !Date.parse(values.discharge.date)) {\n          errors.discharge =\n            typeof errors.discharge === 'object'\n              ? { ...errors.discharge, date: 'Incorrect format date' }\n              : { date: 'Incorrect format date' };\n        }\n        console.log(errors);\n        return errors;\n      }}\n    >\n      {({ isValid, dirty, setFieldTouched, setFieldValue }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Description'\n              placeholder='description'\n              name='description'\n              component={TextField}\n            />\n            <Field\n              label='Date'\n              placeholder='YYYY-MM-DD'\n              name='date'\n              component={TextField}\n            />\n            <Field\n              label='Specialist'\n              placeholder='specialist'\n              name='specialist'\n              component={TextField}\n            />\n            <Field\n              label='Diagnosis Code'\n              name='diagnosisCode'\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              component={DiagnosisSelection}\n            />\n            <Field\n              label='Discharge date'\n              placeholder='YYYY-MM-DD'\n              name='discharge.date'\n              component={TextField}\n            />\n            <Field\n              label='Discharge criteria'\n              placeholder='discharge criteria'\n              name='discharge.criteria'\n              component={TextField}\n            />\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default HospitalForm;\n","import React from 'react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { Field, Formik, Form } from 'formik';\n\nimport { TextField, DiagnosisSelection } from './FormField';\nimport { NewOccupationalHealthcareEntry } from '../types';\n\nexport type EntryFormValues = NewOccupationalHealthcareEntry;\n\ninterface Props {\n  onSubmit: (values: EntryFormValues) => void;\n  onCancel: () => void;\n}\n\nconst OccupationalHealthcareForm: React.FC<Props> = ({\n  onSubmit,\n  onCancel,\n}) => {\n  return (\n    <Formik\n      initialValues={{\n        description: '',\n        specialist: '',\n        date: '',\n        type: 'OccupationalHealthcare',\n        employerName: '',\n        sickLeave: {\n          startDate: '',\n          endDate: '',\n        },\n        diagnosisCodes: undefined,\n      }}\n      onSubmit={onSubmit}\n      validate={(values) => {\n        const requiredError = 'Field is required';\n        const errors: {\n          [field: string]: string | { [field: string]: string };\n        } = {};\n        if (!values.description) {\n          errors.description = requiredError;\n        }\n        if (!values.date) {\n          errors.date = requiredError;\n        }\n        if (values.date && !Date.parse(values.date)) {\n          errors.date = 'Incorrect format date';\n        }\n        if (!values.specialist) {\n          errors.specialist = requiredError;\n        }\n        if (!values.employerName) {\n          errors.employerName = requiredError;\n        }\n        if (values.sickLeave && !Date.parse(values.sickLeave.startDate)) {\n          errors.sickLeave =\n            typeof errors.sickLeave === 'object'\n              ? { ...errors.sickLeave, startDate: 'Incorrect format date' }\n              : { startDate: 'Incorrect format date' };\n        }\n        if (values.sickLeave && !Date.parse(values.sickLeave.endDate)) {\n          errors.sickLeave =\n            typeof errors.sickLeave === 'object'\n              ? { ...errors.sickLeave, endDate: 'Incorrect format date' }\n              : { endDate: 'Incorrect format date' };\n        }\n        return errors;\n      }}\n    >\n      {({ isValid, dirty, setFieldTouched, setFieldValue }) => {\n        return (\n          <Form className='form ui'>\n            <Field\n              label='Description'\n              placeholder='description'\n              name='description'\n              component={TextField}\n            />\n            <Field\n              label='Date'\n              placeholder='YYYY-MM-DD'\n              name='date'\n              component={TextField}\n            />\n            <Field\n              label='Specialist'\n              placeholder='specialist'\n              name='specialist'\n              component={TextField}\n            />\n            <Field\n              label='Diagnosis Code'\n              name='diagnosisCode'\n              setFieldTouched={setFieldTouched}\n              setFieldValue={setFieldValue}\n              component={DiagnosisSelection}\n            />\n            <Field\n              label='Employer name'\n              placeholder='employer name'\n              name='employerName'\n              component={TextField}\n            />\n            <Field\n              label='Sick leave start date'\n              placeholder='YYYY-MM-DD'\n              name='sickLeave.startDate'\n              component={TextField}\n            />\n            <Field\n              label='Sick leave end date'\n              placeholder='YYYY-MM-DD'\n              name='sickLeave.endDate'\n              component={TextField}\n            />\n            <Grid>\n              <Grid.Column floated='left' width={5}>\n                <Button type='button' onClick={onCancel} color='red'>\n                  Cancel\n                </Button>\n              </Grid.Column>\n              <Grid.Column floated='right' width={5}>\n                <Button\n                  type='submit'\n                  floated='right'\n                  color='green'\n                  disabled={!dirty || !isValid}\n                >\n                  Add\n                </Button>\n              </Grid.Column>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default OccupationalHealthcareForm;\n","import React from 'react';\n\nimport { EntryTypeOption } from './FormField';\nimport { NewEntry, EntryType } from '../types';\nimport HealthCheckForm from './HealthCheckForm';\nimport HospitalForm from './HospitalForm';\nimport OccupationalHealthcareForm from './OccupationalHealthcareForm';\n\nexport type EntryFormValues = NewEntry;\n\ninterface Props {\n  onSubmit: (values: EntryFormValues) => void;\n  onCancel: () => void;\n}\n\nconst entryTypeOptions: EntryTypeOption[] = [\n  { value: EntryType.HealthCheck, label: 'HealthCheck' },\n  { value: EntryType.Hospital, label: 'Hospital' },\n  { value: EntryType.OccupationalHealthcare, label: 'OccupationalHealthcare' },\n];\n\nexport const AddEntryForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\n  const [entryType, setEntryType] = React.useState('HealthCheck' as EntryType);\n\n  return (\n    <div>\n      <h5>Entry Type</h5>\n      <select\n        value={entryType}\n        onChange={({ target }) => setEntryType(target.value as EntryType)}\n        className='ui dropdown'\n      >\n        {entryTypeOptions.map((option) => (\n          <option key={option.value} value={option.value}>\n            {option.label || option.value}\n          </option>\n        ))}\n      </select>\n      {entryType === 'HealthCheck' && (\n        <HealthCheckForm onSubmit={onSubmit} onCancel={onCancel} />\n      )}\n      {entryType === 'Hospital' && (\n        <HospitalForm onSubmit={onSubmit} onCancel={onCancel} />\n      )}\n      {entryType === 'OccupationalHealthcare' && (\n        <OccupationalHealthcareForm onSubmit={onSubmit} onCancel={onCancel} />\n      )}\n    </div>\n  );\n};\n\nexport default AddEntryForm;\n","import React from 'react';\nimport { Modal, Segment } from 'semantic-ui-react';\nimport AddEntryForm, { EntryFormValues } from './AddEntryForm';\n\ninterface Props {\n  modalOpen: boolean;\n  onClose: () => void;\n  onSubmit: (values: EntryFormValues) => void;\n  error?: string;\n}\n\nconst AddEntryModal = ({ modalOpen, onClose, onSubmit, error }: Props) => (\n  <Modal open={modalOpen} onClose={onClose} centered={false} closeIcon>\n    <Modal.Header>Add a new Entry</Modal.Header>\n    <Modal.Content>\n      {error && <Segment inverted color='red'>{`Error: ${error}`}</Segment>}\n      <AddEntryForm onSubmit={onSubmit} onCancel={onClose} />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default AddEntryModal;\n","import React from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport { Icon, Table, Button } from 'semantic-ui-react';\n\nimport AddEntryModal from '../AddEntryModal';\nimport {\n  Patient,\n  Entry,\n  HealthCheckEntry,\n  HospitalEntry,\n  OccupationalHealthcareEntry,\n  NewEntry,\n} from '../types';\nimport { apiBaseUrl } from '../constants';\nimport { useStateValue, updatePatient } from '../state';\nimport { addEntry } from '../state/reducer';\n\nconst HealthCheck: React.FC<{ entry: HealthCheckEntry }> = ({ entry }) => {\n  const [{ diagnosis }] = useStateValue();\n  const heartColor = () => {\n    switch (entry.healthCheckRating) {\n      case 0:\n        return 'green';\n      case 1:\n        return 'yellow';\n      case 2:\n        return 'orange';\n      case 3:\n        return 'red';\n      default:\n        return undefined;\n    }\n  };\n\n  return (\n    <Table celled>\n      <Table.Body>\n        <Table.Row>\n          <Table.Cell>\n            <h4>\n              {entry.date} <Icon name={'user md'} size='large' />\n            </h4>\n            <p>specialist: {entry.specialist}</p>\n            <i style={{ color: 'grey' }}>{entry.description}</i> <br />\n            <Icon name='heart' color={heartColor()} />\n            <ul>\n              {entry.diagnosisCodes &&\n                entry.diagnosisCodes.map((code, i) => (\n                  <li key={i}>\n                    {code}: {diagnosis[code]?.name}\n                  </li>\n                ))}\n            </ul>\n          </Table.Cell>\n        </Table.Row>\n      </Table.Body>\n    </Table>\n  );\n};\n\nconst Hospital: React.FC<{ entry: HospitalEntry }> = ({ entry }) => {\n  const [{ diagnosis }] = useStateValue();\n\n  return (\n    <Table celled>\n      <Table.Body>\n        <Table.Row>\n          <Table.Cell>\n            <h4>\n              {entry.date} <Icon name={'hospital'} size='large' />\n            </h4>\n            <p>specialist: {entry.specialist}</p>\n            <i style={{ color: 'grey' }}>{entry.description}</i>\n            <p>\n              {entry.discharge.date}: {entry.discharge.criteria}\n            </p>\n            <ul>\n              {entry.diagnosisCodes &&\n                entry.diagnosisCodes.map((code, i) => (\n                  <li key={i}>\n                    {code}: {diagnosis[code]?.name}\n                  </li>\n                ))}\n            </ul>\n          </Table.Cell>\n        </Table.Row>\n      </Table.Body>\n    </Table>\n  );\n};\n\nconst OccupationalHealthcare: React.FC<{\n  entry: OccupationalHealthcareEntry;\n}> = ({ entry }) => {\n  const [{ diagnosis }] = useStateValue();\n\n  return (\n    <Table celled>\n      <Table.Body>\n        <Table.Row>\n          <Table.Cell>\n            <h4>\n              {entry.date} <Icon name={'stethoscope'} size='large' />{' '}\n              {entry.employerName}\n            </h4>\n            <p>specialist: {entry.specialist}</p>\n            <i style={{ color: 'grey' }}>{entry.description}</i>\n            <p>\n              {entry.sickLeave && 'sick leave, '} start:{' '}\n              {entry.sickLeave && entry.sickLeave.startDate} , end:{' '}\n              {entry.sickLeave && entry.sickLeave.endDate}\n            </p>\n            <ul>\n              {entry.diagnosisCodes &&\n                entry.diagnosisCodes.map((code, i) => (\n                  <li key={i}>\n                    {code}: {diagnosis[code]?.name}\n                  </li>\n                ))}\n            </ul>\n          </Table.Cell>\n        </Table.Row>\n      </Table.Body>\n    </Table>\n  );\n};\nconst EntryDetail: React.FC<{ entry: Entry }> = ({ entry }) => {\n  const assertNever = (value: never): never => {\n    throw new Error(\n      `Unhandled discriminated union member: ${JSON.stringify(value)}`\n    );\n  };\n\n  switch (entry.type) {\n    case 'HealthCheck':\n      return <HealthCheck entry={entry} />;\n    case 'Hospital':\n      return <Hospital entry={entry} />;\n    case 'OccupationalHealthcare':\n      return <OccupationalHealthcare entry={entry} />;\n    default:\n      return assertNever(entry);\n  }\n};\n\nconst PatientDetail: React.FC = () => {\n  const [{ patients }, dispatch] = useStateValue();\n  const { id } = useParams<{ id: string }>();\n\n  const [modalOpen, setModalOpen] = React.useState<boolean>(false);\n  const [error, setError] = React.useState<string | undefined>();\n\n  const openModal = (): void => setModalOpen(true);\n\n  const closeModal = (): void => {\n    setModalOpen(false);\n    setError(undefined);\n  };\n\n  const submitNewPatient = async (values: NewEntry) => {\n    try {\n      const { data: newEntry } = await axios.post<Entry>(\n        `${apiBaseUrl}/patients/${id}/entries`,\n        values\n      );\n      dispatch(addEntry(id, newEntry));\n      closeModal();\n    } catch (e) {\n      console.error(e.response.data);\n      setError(e.response.data.error);\n    }\n  };\n\n  const getPatientDetail = async () => {\n    if (!patients[id]?.ssn || !patients[id]?.entries) {\n      try {\n        const { data: patient } = await axios.get<Patient>(\n          `${apiBaseUrl}/patients/${id}`\n        );\n        dispatch(updatePatient(patient));\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  };\n  getPatientDetail();\n\n  const genderIcon = () => {\n    switch (patients[id]?.gender) {\n      case 'male':\n        return 'mars';\n      case 'female':\n        return 'venus';\n      default:\n        return 'genderless';\n    }\n  };\n\n  const entries = (): Entry[] => {\n    if (!patients[id]?.entries || patients[id].entries?.length === 0) {\n      return [];\n    }\n    return patients[id].entries as Entry[];\n  };\n\n  return (\n    <div className='App'>\n      <h3>\n        {patients[id]?.name}\n        <Icon name={genderIcon()} />\n      </h3>\n      <div>ssn: {patients[id]?.ssn}</div>\n      <div>occupation: {patients[id]?.occupation}</div>\n      <h4>entries</h4>\n      <div>\n        {entries().map((entry) => (\n          <EntryDetail key={entry.id} entry={entry} />\n        ))}\n      </div>\n      <AddEntryModal\n        modalOpen={modalOpen}\n        onSubmit={submitNewPatient}\n        error={error}\n        onClose={closeModal}\n      />\n      <Button onClick={() => openModal()}>Add New Entry</Button>\n    </div>\n  );\n};\n\nexport default PatientDetail;\n","import React from 'react';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport { Button, Divider, Header, Container } from 'semantic-ui-react';\n\nimport { apiBaseUrl } from './constants';\nimport { useStateValue, setPatientList, setDiagnosisList } from './state';\nimport { Patient, Diagnosis } from './types';\n\nimport PatientListPage from './PatientListPage';\nimport PatientDetail from './PatientDetail';\n\nconst App: React.FC = () => {\n  const [, dispatch] = useStateValue();\n  React.useEffect(() => {\n    axios.get<void>(`${apiBaseUrl}/ping`);\n\n    const fetchPatientList = async () => {\n      try {\n        const { data: patientListFromApi } = await axios.get<Patient[]>(\n          `${apiBaseUrl}/patients`\n        );\n        dispatch(setPatientList(patientListFromApi));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    fetchPatientList();\n\n    const fetchDiagnosisList = async () => {\n      try {\n        const { data: diagnosisListFromApi } = await axios.get<Diagnosis[]>(\n          `${apiBaseUrl}/diagnosis`\n        );\n        dispatch(setDiagnosisList(diagnosisListFromApi));\n      } catch (e) {\n        console.error(e);\n      }\n    };\n    fetchDiagnosisList();\n  }, [dispatch]);\n\n  return (\n    <div className='App'>\n      <Router>\n        <Container>\n          <Header as='h1'>Patientor</Header>\n          <Button as={Link} to='/' primary>\n            Home\n          </Button>\n          <Divider hidden />\n          <Switch>\n            <Route path='/patients/:id' render={() => <PatientDetail />} />\n            <Route path='/' render={() => <PatientListPage />} />\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport App from './App';\nimport { reducer, StateProvider } from \"./state\";\n\nReactDOM.render(\n  <StateProvider reducer={reducer}>\n    <App />\n  </StateProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}